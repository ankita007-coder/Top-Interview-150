#Recursion
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return self.helper(nums,0)
    def helper(self,nums,ind):
        if ind>=len(nums)-1:
            return 0
        miniSteps=1000001
        for i in range(1,nums[ind]+1):
            if i+ind<=len(nums)-1:
                miniSteps = min(miniSteps,1+self.helper(nums,i+ind))
        return miniSteps

#Recursion
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp = [1000001]*len(nums)
        return self.helper(nums,0,dp)
    def helper(self,nums,ind):
        if ind>=len(nums)-1:
            return 0
        if dp[ind]!=1000001:
            return dp[ind]
        for i in range(1,nums[ind]+1):
            if i+ind<=len(nums)-1:
                dp[ind] = min(dp[ind],1+self.helper(nums,i+ind))
        return dp[ind]

#tabulation
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        dp = [10000]*n
        dp[n-1]=0
        for i in range(n-2,-1,-1):
            for j in range(1,nums[i]+1):
                dp[i]=min(dp[i],1+dp[min(n-1,i+j)])
        return dp[0]
