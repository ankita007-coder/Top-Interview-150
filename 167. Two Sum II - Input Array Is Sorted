#optimal 
class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        i,j=0,len(numbers)-1
        while i<j:
            if numbers[i]+numbers[j]==target:
                return [i+1,j+1]
            elif numbers[i]+numbers[j]<target:
                i+=1
            else:
                j-=1

#using binary search
class Solution(object):
    def binarySearch(self, numbers, start, end, target):
        # Binary search to find the index of target in numbers[start:end+1]
        while start <= end:
            mid = (start + end) // 2
            if numbers[mid] == target:
                return mid
            elif numbers[mid] < target:
                start = mid + 1
            else:
                end = mid - 1
        return -1

    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        # Iterate through each element in the array
        for i in range(len(numbers)):
            # Calculate the complement required to reach the target sum
            complement = target - numbers[i]
            # Perform binary search to find the index of complement in the remaining sorted portion of the array
            index = self.binarySearch(numbers, i + 1, len(numbers) - 1, complement)
            # If complement is found, return the indices of the two numbers
            if index != -1:
                return [i + 1, index + 1]

#brute
class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        # Iterate through each pair of numbers
        for i in range(len(numbers)):
            for j in range(i + 1, len(numbers)):
                # If the sum of the pair equals the target, return their indices
                if numbers[i] + numbers[j] == target:
                    return [i + 1, j + 1]



