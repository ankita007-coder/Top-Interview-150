#brute approach
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0

        # Using a set to keep track of unique elements
        unique_set = set()
        i = 0

        while i < len(nums):
            if nums[i] in unique_set:
                # If the element is a duplicate, remove it from the list
                nums.pop(i)
            else:
                # If the element is unique, add it to the set and move to the next element
                unique_set.add(nums[i])
                i += 1

        return len(nums)


#optimal
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        i,j = 0,1
        while j<len(nums):
            if nums[i]!=nums[j]:
                i+=1
                nums[i]=nums[j]
            j+=1
        return i+1
