#brute
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        # Create a copy of nums1 with the first m elements
        nums1_copy = nums1[:m]
        
        # Initialize pointers for nums1_copy, nums2, and nums1
        i, j, k = 0, 0, 0
        
        # Merge elements from nums1_copy and nums2 into nums1
        while i < m and j < n:
            if nums1_copy[i] <= nums2[j]:
                nums1[k] = nums1_copy[i]
                i += 1
            else:
                nums1[k] = nums2[j]
                j += 1
            k += 1
        
        # Copy remaining elements from nums1_copy, if any
        while i < m:
            nums1[k] = nums1_copy[i]
            i += 1
            k += 1
        
        # Copy remaining elements from nums2, if any
        while j < n:
            nums1[k] = nums2[j]
            j += 1
            k += 1
        
        return nums1

#Optimal
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        last = m+n-1
        m=m-1
        n=n-1
        while m>=0 and n>=0:
            if nums1[m]>=nums2[n]:
                nums1[last] = nums1[m]
                m-=1
            elif nums1[m]<nums2[n]:
                nums1[last]=nums2[n]
                n-=1
            last-=1
        while n>=0:
            nums1[last]=nums2[n]
            n-=1
            last-=1
        return nums1
